name: Docker CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  DOCKERHUB_REPO: carpentries/workbench-docker

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image (AMD64)
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",name-canonical=true
          push: false
          load: true
          cache-to: type=gha,scope=amd64
          cache-from: type=gha

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
          ls -lAh "${{ runner.temp }}/digests"
          echo "IMAGE_DIGEST_AMD64=$digest" >> $GITHUB_ENV

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd64
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Save Image to Tar File
        run: |
          docker save ${{ env.DOCKERHUB_REPO }} -o ${{ env.IMAGE_DIGEST_AMD64 }}.tar

      - name: Upload Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-amd64
          path: ${{ env.IMAGE_DIGEST_AMD64 }}.tar
          retention-days: 1

  build-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image (ARM64)
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",name-canonical=true
          push: false
          load: true
          cache-to: type=gha,scope=arm64
          cache-from: type=gha

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm64
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  lesson-test:
    needs:
      - build-amd64
      # - build-arm64 # not needed for tests
    permissions:
      checks: write
      contents: write
      pages: write
    strategy:
      fail-fast: false
      matrix:
        lesson: [carpentries/instructor-training, datacarpentry/r-socialsci, carpentries/sandpaper-docs, datacarpentry/r-raster-vector-geospatial, datacarpentry/ecology-workshop]
        experimental: [false]
        include:
          - lesson: carpentries/instructor-training
            lesson-name: Instructor Training
          - lesson: datacarpentry/r-socialsci
            lesson-name: R for Social Scientists
          - lesson: carpentries/sandpaper-docs
            lesson-name: Workbench Documentation
          - lesson: datacarpentry/r-raster-vector-geospatial
            lesson-name: Raster and Vector Geospatial Data with R
            experimental: true
          - lesson: datacarpentry/ecology-workshop
            lesson-name: Ecology Workshop
            experimental: true
    name: ${{ matrix.lesson-name }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    defaults:
      run:
        shell: bash # forces 'Git for Windows' on Windows
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv/
    steps:
      - name: "Checkout Lesson"
        if: "${{ matrix.lesson != '' }}"
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.lesson }}
          path: lesson_tmp

      - name: "Copy Lesson"
        if: "${{ matrix.lesson != '' }}"
        run: |
          pwd
          mkdir -p ${{ github.workspace }}/lesson
          cp -r lesson_tmp/* ${{ github.workspace }}/lesson
          rm -rf lesson_tmp/
          ls -lAh ${{ github.workspace }}/lesson

      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: image-amd64

      - name: Load Image into Docker
        run: |
          docker load -i ${{ env.IMAGE_DIGEST_AMD64 }}.tar
          docker images --digests

      - name: Run Tests on ${{ matrix.lesson }}
        run: |
          docker run --rm --platform=${{ matrix.platform }} \
          -v ${{ github.workspace }}/lesson/${{ matrix.lesson }}:/home/rstudio/lesson \
          -w /home/rstudio/lesson \
          ${{ env.DOCKERHUB_REPO }} \
          Rscript run-tests.R

      - name: Cleanup
        run: |
          rm -rf ${{ runner.temp }}/digests
          rm -rf ${{ github.workspace }}/lesson

  publish:
    if: (github.event_name == 'release' && github.repository == 'carpentries/workbench-docker')
    needs:
      - build-amd64
      - build-arm64
      - lesson-test
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Push AMD64 image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=amd64

      - name: Push ARM64 image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=arm64

  merge:
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.repository == 'carpentries/workbench-docker')
    needs:
      - publish
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=latest,enable={{is_default_branch}}
            type=sha

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}
